{"version":3,"sources":["WordAdder.js","WordRevision.js","WordTester.js","App.js","serviceWorker.js","index.js"],"names":["WordAdder","React","Component","[object Object]","args","super","this","handleInputChange","event","target","value","type","checked","name","setState","handleSubmit","preventDefault","props","onWordAdded","original","state","translation","lastRevised","render","react_default","a","createElement","onSubmit","htmlFor","onChange","WordRevision","constructor","wordsCount","startRevision","wordList","words","slice","i","length","j","Math","floor","random","_ref","langSettings","push","revisedWords","revisionInProgress","step","stopRevisingByButton","nextStep","result","atTheEndStep","self","checkWordInArray","word","correctAnswer","textContent","findIndex","Date","lastResult","onWordsUpdated","renderOptions","position","ceil","key","onClick","pos","tempWord","min","max","disabled","WordTester","wordSortFn","b","showExportWords","display","link","encodeURIComponent","JSON","stringify","originalLanguage","targetLanguage","showTable","showRevise","showAddWords","addWord","updateWords","list","sort","map","index","toString","src_WordAdder","src_WordRevision","href","download","App","getFile","files","f","reader","FileReader","onload","theFile","e","data","parse","wordsFormatError","readAsText","className","accept","src_WordTester","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ffccaa1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass WordAdder extends React.Component {\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onWordAdded({\r\n      original: this.state.original,\r\n      translation: this.state.target,\r\n      lastRevised: null\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"original\">Original</label>\r\n        <input type=\"text\" onChange={this.handleInputChange} name=\"original\" />\r\n\r\n        <label htmlFor=\"target\">Target</label>\r\n        <input type=\"text\" onChange={this.handleInputChange} name=\"target\" />\r\n\r\n        <input type=\"submit\" value=\"Add word\" />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WordAdder;","import React from 'react';\r\n\r\nclass WordRevision extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      revisionInProgress: false,\r\n      wordsCount: 10\r\n    }\r\n  }\r\n\r\n  wordsCount = (event) => {\r\n    this.setState({ wordsCount: event.target.value })\r\n  }\r\n\r\n  startRevision = () => {\r\n    let wordList = this.props.words.slice(0, this.state.wordsCount)\r\n\r\n    for (let i = wordList.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [wordList[i], wordList[j]] = [wordList[j], wordList[i]];\r\n    }\r\n\r\n    let langSettings = [];\r\n    for (let i = 0; i < this.state.wordsCount; i++) {\r\n      langSettings.push(Math.random() > 0.5 ? \"original\" : \"translation\")\r\n    }\r\n\r\n    this.setState({\r\n      revisedWords: wordList,\r\n      revisionInProgress: true,\r\n      step: 0,\r\n      langSettings: langSettings\r\n    });\r\n  }\r\n\r\n  stopRevisingByButton = () => {\r\n\r\n  }\r\n\r\n  nextStep = (event) => {\r\n    let atTheEndStep = 0;\r\n    let self = this;\r\n    function checkWordInArray(word) {\r\n      if (self.state.revisedWords[atTheEndStep].original === word.original && self.state.revisedWords[atTheEndStep].translation === word.translation) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    let result;\r\n    let correctAnswer = this.state.langSettings[this.state.step] === \"original\" ? this.state.revisedWords[this.state.step].original : this.state.revisedWords[this.state.step].translation;\r\n    result = event.target.textContent === correctAnswer ? \"You were right\" : \"Wrong! \\\"\" + this.state.revisedWords[this.state.step].translation + \"\\\" is \\\"\" + this.state.revisedWords[this.state.step].original + \"\\\"\";\r\n    if (this.state.step + 1 >= this.state.revisedWords.length) {\r\n      let words = this.props.words;\r\n      for (let i = 0; i <= this.state.step; i++) {\r\n        let index = this.props.words.findIndex(checkWordInArray);\r\n        words[index].lastRevised = new Date();\r\n        atTheEndStep++;\r\n      }\r\n\r\n      this.setState({\r\n        lastResult: result,\r\n        revisionInProgress: false\r\n      });\r\n      this.props.onWordsUpdated(words)\r\n      return;\r\n    }\r\n    this.setState({\r\n      lastResult: result,\r\n      step: this.state.step + 1\r\n    });\r\n  }\r\n\r\n  renderOptions = () => {\r\n    let words = [];\r\n    let position = Math.ceil(Math.random() * 6) - 1;\r\n    for (let i = 0; i < 6; i++) {\r\n      if (i === position) {\r\n        let word = this.state.revisedWords[this.state.step];\r\n        words.push(\r\n          <button key={\"button-\" + i} onClick={this.nextStep}>{this.state.langSettings[this.state.step] === \"original\" ? word.original : word.translation}</button>\r\n        );\r\n        continue;\r\n      }\r\n\r\n      let word;\r\n      while (!word) {\r\n        let pos = Math.ceil(Math.random() * this.props.words.length) - 1;\r\n        let tempWord = this.props.words[pos];\r\n        if (tempWord.original !== this.state.revisedWords[this.state.step].original &&\r\n          tempWord.translation !== this.state.revisedWords[this.state.step].translation) {\r\n          word = tempWord;\r\n        }\r\n      }\r\n      words.push(\r\n        <button key={\"button-\" + i} onClick={this.nextStep}>{this.state.langSettings[this.state.step] === \"original\" ? word.original : word.translation}</button>\r\n      );\r\n    }\r\n    return words;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"number\">Number of Words</label>\r\n        <input type=\"number\" step=\"1\" min=\"5\" max={this.props.words.length} value={this.state.wordsCount} name=\"number\" onChange={this.wordsCount} disabled={this.state.revisionInProgress} />\r\n        <button onClick={this.startRevision} disabled={this.state.revisionInProgress}>Start</button>\r\n        {this.state.lastResult && <p>{this.state.lastResult}</p>}\r\n        {this.state.revisionInProgress &&\r\n          <div>\r\n            <p>Progress: {this.state.step + 1}/{this.state.wordsCount}</p>\r\n            <p>{this.state.langSettings[this.state.step] !== \"original\" ? this.state.revisedWords[this.state.step].original : this.state.revisedWords[this.state.step].translation}</p>\r\n            <section>\r\n              {this.renderOptions()}\r\n            </section>\r\n            <button onClick={this.stopRevisingByButton}>Stop</button>\r\n          </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordRevision;","import React from 'react';\r\nimport WordAdder from './WordAdder';\r\nimport WordRevision from './WordRevision';\r\n\r\n\r\n// accepts prop words\r\nclass WordTester extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      words: this.props.words,\r\n      display: \"table\"\r\n    }\r\n  }\r\n\r\n  wordSortFn = (a, b) => {\r\n    if (a.lastRevised < b.lastRevised) {\r\n      return -1;\r\n    }\r\n    if (a.lastRevised > b.lastRevised) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  showExportWords = () => {\r\n    this.setState({\r\n      display: \"link\",\r\n      link: 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify({\r\n        words: this.state.words,\r\n        originalLanguage: this.props.original,\r\n        targetLanguage: this.props.target,\r\n\r\n      }))\r\n    })\r\n  }\r\n\r\n  showTable = () => {\r\n    this.setState({\r\n      display: \"table\"\r\n    })\r\n  }\r\n\r\n  showRevise = () => {\r\n    this.setState({\r\n      display: \"revise\"\r\n    })\r\n  }\r\n\r\n  showAddWords = () => {\r\n    this.setState({\r\n      display: \"add\"\r\n    })\r\n  }\r\n\r\n  addWord = (word) => {\r\n    let words = this.state.words;\r\n    words.push(word);\r\n    this.setState({\r\n      words: words\r\n    })\r\n  }\r\n\r\n  updateWords = (words) => {\r\n    this.setState({\r\n      words: words\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let wordList = this.state.words.sort(this.wordSortFn);\r\n    debugger;\r\n    let list = wordList.map((word, index) =>\r\n      <tr key={\"line-\" + index}>\r\n        <td>{word.original}</td>\r\n        <td>{word.translation}</td>\r\n        <td>{word.lastRevised ? (new Date(word.lastRevised)).toString() : \"Never\"}</td>\r\n      </tr>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h1>Word testing tool</h1>\r\n        <h2>From {this.props.original} to {this.props.target}</h2>\r\n        <nav>\r\n          <button onClick={this.showTable}>Show table</button>\r\n          <button onClick={this.showRevise}>Revise</button>\r\n          <button onClick={this.showAddWords}>Add words</button>\r\n          <button onClick={this.showExportWords}>Export words</button>\r\n        </nav>\r\n        {this.state.display === \"add\" && <WordAdder onWordAdded={this.addWord} />}\r\n        {this.state.display === \"revise\" && <WordRevision words={this.state.words} onWordsUpdated={this.updateWords} />}\r\n        {this.state.display === \"link\" && <a href={this.state.link} download=\"words.json\">Download updated words</a>}\r\n        {this.state.display === \"table\" &&\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>{this.props.original}</th>\r\n                <th>{this.props.target}</th>\r\n                <th>Last revised</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {list}\r\n            </tbody>\r\n          </table>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordTester;","import React from 'react';\r\nimport './App.css';\r\nimport WordTester from './WordTester';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { words: [] };\r\n  }\r\n\r\n  getFile = (event) => {\r\n    let files = event.target.files;\r\n\r\n    for (var i = 0, f; f = files[i]; i++) {\r\n      var reader = new FileReader();\r\n\r\n      reader.onload = ((theFile) => {\r\n        return (e) => {\r\n          let data = JSON.parse(e.target.result);\r\n          if (!data.words) {\r\n            this.setState({ wordsFormatError: true });\r\n            return;\r\n          }\r\n          \r\n          this.setState({ \r\n            words: data.words, \r\n            original: data.originalLanguage,\r\n            target: data.targetLanguage,\r\n            wordsFormatError: false \r\n          });\r\n        };\r\n      })(f);\r\n\r\n      reader.readAsText(f);\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    if (this.state.wordsFormatError) {\r\n      return (\r\n        <div className=\"App\">\r\n          Please, use correct word file<br />\r\n          <input type=\"file\" accept=\"application/json\" onChange={this.getFile}/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if ((this.state.words && this.state.words.length === 0) || !this.state.words) {\r\n      return (\r\n        <div className=\"App\">\r\n          <input type=\"file\" accept=\"application/json\" onChange={this.getFile}/>\r\n        </div>\r\n      )\r\n    }    \r\n    return (\r\n      <div className=\"App\">\r\n        <WordTester words={this.state.words} target={this.state.target} original={this.state.original} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}